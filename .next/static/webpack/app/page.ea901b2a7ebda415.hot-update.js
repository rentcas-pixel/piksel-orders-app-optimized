"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/pocketbase.ts":
/*!*******************************!*\
  !*** ./src/lib/pocketbase.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PocketBaseService: function() { return /* binding */ PocketBaseService; }\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config */ \"(app-pages-browser)/./src/config/index.ts\");\n\nconst POCKETBASE_URL = _config__WEBPACK_IMPORTED_MODULE_0__.config.pocketbase.url;\nconst COLLECTION = _config__WEBPACK_IMPORTED_MODULE_0__.config.pocketbase.collection;\nclass PocketBaseService {\n    static async makeRequest(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(POCKETBASE_URL, \"/api/collections/\").concat(COLLECTION).concat(endpoint);\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...options.headers\n                },\n                ...options\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"PocketBase request failed:\", error);\n            throw error;\n        }\n    }\n    static async getOrders() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { page = 1, perPage = 50, sort = \"-updated\", filter = \"\" } = params;\n        const queryParams = new URLSearchParams({\n            page: page.toString(),\n            perPage: perPage.toString(),\n            sort,\n            ...filter && {\n                filter\n            }\n        });\n        const url = \"/records?\".concat(queryParams);\n        console.log(\"\\uD83C\\uDF10 PocketBase request URL:\", url);\n        console.log(\"\\uD83C\\uDF10 PocketBase filter:\", filter);\n        const response = await this.makeRequest(url);\n        console.log(\"\\uD83D\\uDCE6 PocketBase raw response:\", response);\n        return {\n            items: response.items || [],\n            totalItems: response.totalItems || 0,\n            totalPages: response.totalPages || 0\n        };\n    }\n    static async getOrder(id) {\n        const response = await this.makeRequest(\"/records/\".concat(id));\n        return response;\n    }\n    static async searchOrders(query) {\n        const response = await this.makeRequest('/records?filter=(client~\"'.concat(query, '\" || agency~\"').concat(query, '\" || invoice_id~\"').concat(query, '\")'));\n        return response.items || [];\n    }\n    static async updateOrder(id, data) {\n        const response = await this.makeRequest(\"/records/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(data)\n        });\n        return response;\n    }\n    static async deleteOrder(id) {\n        await this.makeRequest(\"/records/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    static async getQuoteByOrderId(orderId) {\n        try {\n            // Try different possible field names for order ID\n            const possibleFields = [\n                \"order_id\",\n                \"order-id\",\n                \"orderId\",\n                \"invoice_id\",\n                \"invoice-id\"\n            ];\n            for (const field of possibleFields){\n                try {\n                    const url = \"\".concat(POCKETBASE_URL, \"/api/collections/quotes/records?filter=\").concat(field, '=\"').concat(orderId, '\"&perPage=1');\n                    console.log(\"\\uD83D\\uDD0D Trying to fetch quote with field '\".concat(field, \"' from:\"), url);\n                    const response = await fetch(url, {\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    });\n                    if (response.ok) {\n                        const data = await response.json();\n                        if (data.items && data.items.length > 0) {\n                            console.log(\"✅ Found quote with field '\".concat(field, \"' for order:\"), orderId);\n                            return data.items[0];\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"❌ Failed to fetch quote with field '\".concat(field, \"' for order:\"), orderId);\n                    continue;\n                }\n            }\n            console.log(\"❌ No quote found for order:\", orderId);\n            return null;\n        } catch (error) {\n            console.log(\"❌ Error fetching quote for order:\", orderId, error);\n            return null;\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/pocketbase.ts\n"));

/***/ })

});