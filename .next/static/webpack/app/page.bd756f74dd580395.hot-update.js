"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/supabase-service.ts":
/*!*************************************!*\
  !*** ./src/lib/supabase-service.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseService: function() { return /* binding */ SupabaseService; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\nclass SupabaseService {\n    // Comments\n    static async getComments(orderId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\").eq(\"order_id\", orderId).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        // Load printscreens for this order\n        const printscreens = await this.getPrintscreensForOrder(orderId);\n        // Add printscreens to all comments (simple approach)\n        const commentsWithPrintscreens = (data || []).map((comment)=>({\n                ...comment,\n                printscreens: printscreens\n            }));\n        return commentsWithPrintscreens;\n    }\n    static async getPrintscreensForOrder(orderId) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"file_attachments\").select(\"*\").eq(\"order_id\", orderId).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                console.error(\"❌ Failed to load printscreens:\", error);\n                return [];\n            }\n            // Filter printscreens on client side\n            const printscreens = (data || []).filter((file)=>file.file_type && file.file_type.startsWith(\"image/\"));\n            return printscreens;\n        } catch (error) {\n            console.error(\"❌ Error loading printscreens:\", error);\n            return [];\n        }\n    }\n    static async addComment(comment) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").insert([\n            {\n                ...comment,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    }\n    static async updateComment(id, text) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").update({\n            text,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", id).select().single();\n        if (error) throw error;\n        return data;\n    }\n    static async deleteComment(id) {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").delete().eq(\"id\", id);\n        if (error) throw error;\n    }\n    // Reminders\n    static async getReminders(orderId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"reminders\").select(\"*\").eq(\"order_id\", orderId).order(\"due_date\", {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    }\n    static async addReminder(orderId, reminder) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"reminders\").insert([\n            {\n                order_id: orderId,\n                ...reminder,\n                created_at: new Date().toISOString()\n            }\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    }\n    static async updateReminder(id, updates) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"reminders\").update(updates).eq(\"id\", id).select().single();\n        if (error) throw error;\n        return data;\n    }\n    static async deleteReminder(id) {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"reminders\").delete().eq(\"id\", id);\n        if (error) throw error;\n    }\n    // File Attachments\n    static async getFiles(orderId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"file_attachments\").select(\"*\").eq(\"order_id\", orderId).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data || [];\n    }\n    static async uploadFile(file, orderId) {\n        try {\n            const fileExt = file.name.split(\".\").pop();\n            const fileName = \"\".concat(orderId, \"-\").concat(Date.now(), \".\").concat(fileExt);\n            const storagePath = \"orders/\".concat(orderId, \"/\").concat(fileName);\n            // Upload file to Storage\n            const { data: uploadData, error: uploadError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"order-files\").upload(storagePath, file);\n            if (uploadError) throw uploadError;\n            // Get public URL\n            const { data: urlData } = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"order-files\").getPublicUrl(storagePath);\n            // Save metadata to database\n            const metadata = {\n                order_id: orderId,\n                file_name: file.name,\n                file_path: storagePath,\n                file_url: urlData.publicUrl,\n                file_size: file.size,\n                file_type: file.type,\n                uploaded_at: new Date().toISOString()\n            };\n            const { error: metadataError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"order_files\").insert(metadata);\n            if (metadataError) throw metadataError;\n            return urlData.publicUrl;\n        } catch (error) {\n            console.error(\"Error uploading file:\", error);\n            throw error;\n        }\n    }\n    static async uploadPrintscreen(orderId, file) {\n        try {\n            // 1. Įkelti printscreen į Supabase Storage\n            const fileName = \"printscreen_\".concat(Date.now(), \"_\").concat(file.name);\n            const storagePath = \"\".concat(orderId, \"/printscreens/\").concat(fileName);\n            const { error: uploadError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"files\").upload(storagePath, file);\n            if (uploadError) {\n                throw uploadError;\n            }\n            // 2. Gauti public URL\n            const { data: urlData } = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"files\").getPublicUrl(storagePath);\n            if (!urlData.publicUrl) {\n                throw new Error(\"Failed to get public URL\");\n            }\n            // 3. Išsaugoti printscreen metaduomenis į DB\n            const metadata = {\n                order_id: orderId,\n                filename: file.name,\n                file_url: urlData.publicUrl,\n                file_type: file.type || \"image/png\",\n                created_at: new Date().toISOString()\n            };\n            const { data: fileData, error: insertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"file_attachments\").insert([\n                metadata\n            ]).select().single();\n            if (insertError) {\n                throw insertError;\n            }\n            return {\n                id: fileData.id,\n                order_id: orderId,\n                filename: file.name,\n                file_url: urlData.publicUrl,\n                file_type: file.type || \"image/png\",\n                created_at: fileData.created_at\n            };\n        } catch (error) {\n            console.error(\"Printscreen upload failed:\", error);\n            throw error;\n        }\n    }\n    static async deleteFile(id) {\n        const { data: file, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"file_attachments\").select(\"file_url\").eq(\"id\", id).single();\n        if (fetchError) throw fetchError;\n        // Extract file path from URL - get everything after the bucket name\n        const url = new URL(file.file_url);\n        const pathParts = url.pathname.split(\"/\");\n        const bucketIndex = pathParts.findIndex((part)=>part === \"files\");\n        const filePath = pathParts.slice(bucketIndex + 1).join(\"/\");\n        const { error: deleteError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"files\").remove([\n            filePath\n        ]);\n        if (deleteError) {\n            throw deleteError;\n        }\n        const { error: dbError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"file_attachments\").delete().eq(\"id\", id);\n        if (dbError) {\n            throw dbError;\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase-service.ts\n"));

/***/ })

});