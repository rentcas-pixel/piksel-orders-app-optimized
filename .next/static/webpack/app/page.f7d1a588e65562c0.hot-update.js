"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/pocketbase.ts":
/*!*******************************!*\
  !*** ./src/lib/pocketbase.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PocketBaseService: function() { return /* binding */ PocketBaseService; }\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config */ \"(app-pages-browser)/./src/config/index.ts\");\n\nconst POCKETBASE_URL = _config__WEBPACK_IMPORTED_MODULE_0__.config.pocketbase.url;\nconst COLLECTION = _config__WEBPACK_IMPORTED_MODULE_0__.config.pocketbase.collection;\nclass PocketBaseService {\n    static async makeRequest(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(POCKETBASE_URL, \"/api/collections/\").concat(COLLECTION).concat(endpoint);\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...options.headers\n                },\n                ...options\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"PocketBase request failed:\", error);\n            throw error;\n        }\n    }\n    static async getOrders() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { page = 1, perPage = 50, sort = \"-updated\", filter = \"\" } = params;\n        const queryParams = new URLSearchParams({\n            page: page.toString(),\n            perPage: perPage.toString(),\n            sort,\n            ...filter && {\n                filter\n            }\n        });\n        const url = \"/records?\".concat(queryParams);\n        console.log(\"\\uD83C\\uDF10 PocketBase request URL:\", url);\n        console.log(\"\\uD83C\\uDF10 PocketBase filter:\", filter);\n        const response = await this.makeRequest(url);\n        console.log(\"\\uD83D\\uDCE6 PocketBase raw response:\", response);\n        return {\n            items: response.items || [],\n            totalItems: response.totalItems || 0,\n            totalPages: response.totalPages || 0\n        };\n    }\n    static async getOrder(id) {\n        const response = await this.makeRequest(\"/records/\".concat(id));\n        return response;\n    }\n    static async searchOrders(query) {\n        const response = await this.makeRequest('/records?filter=(client~\"'.concat(query, '\" || agency~\"').concat(query, '\" || invoice_id~\"').concat(query, '\")'));\n        return response.items || [];\n    }\n    static async updateOrder(id, data) {\n        const response = await this.makeRequest(\"/records/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(data)\n        });\n        return response;\n    }\n    static async deleteOrder(id) {\n        await this.makeRequest(\"/records/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    static async getQuoteByOrderId(orderId) {\n        try {\n            var _data_items;\n            const url = \"\".concat(POCKETBASE_URL, '/api/collections/quotes/records?filter=order_id=\"').concat(orderId, '\"&perPage=1');\n            const response = await fetch(url, {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return ((_data_items = data.items) === null || _data_items === void 0 ? void 0 : _data_items[0]) || null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvcG9ja2V0YmFzZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrQztBQUdsQyxNQUFNQyxpQkFBaUJELDJDQUFNQSxDQUFDRSxVQUFVLENBQUNDLEdBQUc7QUFDNUMsTUFBTUMsYUFBYUosMkNBQU1BLENBQUNFLFVBQVUsQ0FBQ0csVUFBVTtBQUV4QyxNQUFNQztJQUNYLGFBQXFCQyxZQUFZQyxRQUFnQixFQUE2QjtZQUEzQkMsVUFBQUEsaUVBQXVCLENBQUM7UUFDekUsTUFBTU4sTUFBTSxHQUFxQ0MsT0FBbENILGdCQUFlLHFCQUFnQ08sT0FBYkosWUFBc0IsT0FBVEk7UUFFOUQsSUFBSTtZQUNGLE1BQU1FLFdBQVcsTUFBTUMsTUFBTVIsS0FBSztnQkFDaENTLFNBQVM7b0JBQ1AsZ0JBQWdCO29CQUNoQixHQUFHSCxRQUFRRyxPQUFPO2dCQUNwQjtnQkFDQSxHQUFHSCxPQUFPO1lBQ1o7WUFFQSxJQUFJLENBQUNDLFNBQVNHLEVBQUUsRUFBRTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLHVCQUF1QyxPQUFoQkosU0FBU0ssTUFBTTtZQUN4RDtZQUVBLE9BQU8sTUFBTUwsU0FBU00sSUFBSTtRQUM1QixFQUFFLE9BQU9DLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDhCQUE4QkE7WUFDNUMsTUFBTUE7UUFDUjtJQUNGO0lBRUEsYUFBYUUsWUFLZ0U7WUFMdERDLFNBQUFBLGlFQUtuQixDQUFDO1FBQ0gsTUFBTSxFQUFFQyxPQUFPLENBQUMsRUFBRUMsVUFBVSxFQUFFLEVBQUVDLE9BQU8sVUFBVSxFQUFFQyxTQUFTLEVBQUUsRUFBRSxHQUFHSjtRQUVuRSxNQUFNSyxjQUFjLElBQUlDLGdCQUFnQjtZQUN0Q0wsTUFBTUEsS0FBS00sUUFBUTtZQUNuQkwsU0FBU0EsUUFBUUssUUFBUTtZQUN6Qko7WUFDQSxHQUFJQyxVQUFVO2dCQUFFQTtZQUFPLENBQUM7UUFDMUI7UUFFQSxNQUFNckIsTUFBTSxZQUF3QixPQUFac0I7UUFDeEJQLFFBQVFVLEdBQUcsQ0FBQyx3Q0FBOEJ6QjtRQUMxQ2UsUUFBUVUsR0FBRyxDQUFDLG1DQUF5Qko7UUFFckMsTUFBTWQsV0FBVyxNQUFNLElBQUksQ0FBQ0gsV0FBVyxDQUFDSjtRQUV4Q2UsUUFBUVUsR0FBRyxDQUFDLHlDQUErQmxCO1FBRTNDLE9BQU87WUFDTG1CLE9BQU9uQixTQUFTbUIsS0FBSyxJQUFJLEVBQUU7WUFDM0JDLFlBQVlwQixTQUFTb0IsVUFBVSxJQUFJO1lBQ25DQyxZQUFZckIsU0FBU3FCLFVBQVUsSUFBSTtRQUNyQztJQUNGO0lBRUEsYUFBYUMsU0FBU0MsRUFBVSxFQUFrQjtRQUNoRCxNQUFNdkIsV0FBVyxNQUFNLElBQUksQ0FBQ0gsV0FBVyxDQUFDLFlBQWUsT0FBSDBCO1FBQ3BELE9BQU92QjtJQUNUO0lBRUEsYUFBYXdCLGFBQWFDLEtBQWEsRUFBb0I7UUFDekQsTUFBTXpCLFdBQVcsTUFBTSxJQUFJLENBQUNILFdBQVcsQ0FBQyw0QkFBaUQ0QixPQUFyQkEsT0FBTSxpQkFBd0NBLE9BQXpCQSxPQUFNLHFCQUF5QixPQUFOQSxPQUFNO1FBQ3hILE9BQU96QixTQUFTbUIsS0FBSyxJQUFJLEVBQUU7SUFDN0I7SUFFQSxhQUFhTyxZQUFZSCxFQUFVLEVBQUVJLElBQW9CLEVBQWtCO1FBQ3pFLE1BQU0zQixXQUFXLE1BQU0sSUFBSSxDQUFDSCxXQUFXLENBQUMsWUFBZSxPQUFIMEIsS0FBTTtZQUN4REssUUFBUTtZQUNSQyxNQUFNQyxLQUFLQyxTQUFTLENBQUNKO1FBQ3ZCO1FBQ0EsT0FBTzNCO0lBQ1Q7SUFFQSxhQUFhZ0MsWUFBWVQsRUFBVSxFQUFpQjtRQUNsRCxNQUFNLElBQUksQ0FBQzFCLFdBQVcsQ0FBQyxZQUFlLE9BQUgwQixLQUFNO1lBQ3ZDSyxRQUFRO1FBQ1Y7SUFDRjtJQUVBLGFBQWFLLGtCQUFrQkMsT0FBZSxFQUE0RDtRQUN4RyxJQUFJO2dCQWNLUDtZQWJQLE1BQU1sQyxNQUFNLEdBQXFFeUMsT0FBbEUzQyxnQkFBZSxxREFBMkQsT0FBUjJDLFNBQVE7WUFFekYsTUFBTWxDLFdBQVcsTUFBTUMsTUFBTVIsS0FBSztnQkFDaENTLFNBQVM7b0JBQ1AsZ0JBQWdCO2dCQUNsQjtZQUNGO1lBRUEsSUFBSSxDQUFDRixTQUFTRyxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSx1QkFBdUMsT0FBaEJKLFNBQVNLLE1BQU07WUFDeEQ7WUFFQSxNQUFNc0IsT0FBTyxNQUFNM0IsU0FBU00sSUFBSTtZQUNoQyxPQUFPcUIsRUFBQUEsY0FBQUEsS0FBS1IsS0FBSyxjQUFWUSxrQ0FBQUEsV0FBWSxDQUFDLEVBQUUsS0FBSTtRQUM1QixFQUFFLFVBQU07WUFDTixPQUFPO1FBQ1Q7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvcG9ja2V0YmFzZS50cz9lNjU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ0AvY29uZmlnJztcbmltcG9ydCB7IE9yZGVyIH0gZnJvbSAnQC90eXBlcyc7XG5cbmNvbnN0IFBPQ0tFVEJBU0VfVVJMID0gY29uZmlnLnBvY2tldGJhc2UudXJsO1xuY29uc3QgQ09MTEVDVElPTiA9IGNvbmZpZy5wb2NrZXRiYXNlLmNvbGxlY3Rpb247XG5cbmV4cG9ydCBjbGFzcyBQb2NrZXRCYXNlU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIG1ha2VSZXF1ZXN0KGVuZHBvaW50OiBzdHJpbmcsIG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge30pIHtcbiAgICBjb25zdCB1cmwgPSBgJHtQT0NLRVRCQVNFX1VSTH0vYXBpL2NvbGxlY3Rpb25zLyR7Q09MTEVDVElPTn0ke2VuZHBvaW50fWA7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIC4uLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignUG9ja2V0QmFzZSByZXF1ZXN0IGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0T3JkZXJzKHBhcmFtczoge1xuICAgIHBhZ2U/OiBudW1iZXI7XG4gICAgcGVyUGFnZT86IG51bWJlcjtcbiAgICBzb3J0Pzogc3RyaW5nO1xuICAgIGZpbHRlcj86IHN0cmluZztcbiAgfSA9IHt9KTogUHJvbWlzZTx7IGl0ZW1zOiBPcmRlcltdOyB0b3RhbEl0ZW1zOiBudW1iZXI7IHRvdGFsUGFnZXM6IG51bWJlciB9PiB7XG4gICAgY29uc3QgeyBwYWdlID0gMSwgcGVyUGFnZSA9IDUwLCBzb3J0ID0gJy11cGRhdGVkJywgZmlsdGVyID0gJycgfSA9IHBhcmFtcztcbiAgICBcbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgcGFnZTogcGFnZS50b1N0cmluZygpLFxuICAgICAgcGVyUGFnZTogcGVyUGFnZS50b1N0cmluZygpLFxuICAgICAgc29ydCxcbiAgICAgIC4uLihmaWx0ZXIgJiYgeyBmaWx0ZXIgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCB1cmwgPSBgL3JlY29yZHM/JHtxdWVyeVBhcmFtc31gO1xuICAgIGNvbnNvbGUubG9nKCfwn4yQIFBvY2tldEJhc2UgcmVxdWVzdCBVUkw6JywgdXJsKTtcbiAgICBjb25zb2xlLmxvZygn8J+MkCBQb2NrZXRCYXNlIGZpbHRlcjonLCBmaWx0ZXIpO1xuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCh1cmwpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn5OmIFBvY2tldEJhc2UgcmF3IHJlc3BvbnNlOicsIHJlc3BvbnNlKTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgaXRlbXM6IHJlc3BvbnNlLml0ZW1zIHx8IFtdLFxuICAgICAgdG90YWxJdGVtczogcmVzcG9uc2UudG90YWxJdGVtcyB8fCAwLFxuICAgICAgdG90YWxQYWdlczogcmVzcG9uc2UudG90YWxQYWdlcyB8fCAwLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0T3JkZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8T3JkZXI+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYC9yZWNvcmRzLyR7aWR9YCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNlYXJjaE9yZGVycyhxdWVyeTogc3RyaW5nKTogUHJvbWlzZTxPcmRlcltdPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvcmVjb3Jkcz9maWx0ZXI9KGNsaWVudH5cIiR7cXVlcnl9XCIgfHwgYWdlbmN5flwiJHtxdWVyeX1cIiB8fCBpbnZvaWNlX2lkflwiJHtxdWVyeX1cIilgKTtcbiAgICByZXR1cm4gcmVzcG9uc2UuaXRlbXMgfHwgW107XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgdXBkYXRlT3JkZXIoaWQ6IHN0cmluZywgZGF0YTogUGFydGlhbDxPcmRlcj4pOiBQcm9taXNlPE9yZGVyPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvcmVjb3Jkcy8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBkZWxldGVPcmRlcihpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChgL3JlY29yZHMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldFF1b3RlQnlPcmRlcklkKG9yZGVySWQ6IHN0cmluZyk6IFByb21pc2U8eyBsaW5rPzogc3RyaW5nOyB2aWFkdWN0X2xpbms/OiBzdHJpbmcgfSB8IG51bGw+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gYCR7UE9DS0VUQkFTRV9VUkx9L2FwaS9jb2xsZWN0aW9ucy9xdW90ZXMvcmVjb3Jkcz9maWx0ZXI9b3JkZXJfaWQ9XCIke29yZGVySWR9XCImcGVyUGFnZT0xYDtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YS5pdGVtcz8uWzBdIHx8IG51bGw7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjb25maWciLCJQT0NLRVRCQVNFX1VSTCIsInBvY2tldGJhc2UiLCJ1cmwiLCJDT0xMRUNUSU9OIiwiY29sbGVjdGlvbiIsIlBvY2tldEJhc2VTZXJ2aWNlIiwibWFrZVJlcXVlc3QiLCJlbmRwb2ludCIsIm9wdGlvbnMiLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0T3JkZXJzIiwicGFyYW1zIiwicGFnZSIsInBlclBhZ2UiLCJzb3J0IiwiZmlsdGVyIiwicXVlcnlQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ0b1N0cmluZyIsImxvZyIsIml0ZW1zIiwidG90YWxJdGVtcyIsInRvdGFsUGFnZXMiLCJnZXRPcmRlciIsImlkIiwic2VhcmNoT3JkZXJzIiwicXVlcnkiLCJ1cGRhdGVPcmRlciIsImRhdGEiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImRlbGV0ZU9yZGVyIiwiZ2V0UXVvdGVCeU9yZGVySWQiLCJvcmRlcklkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/pocketbase.ts\n"));

/***/ })

});